type GithubAuth {
  id: ID!
  state: String!
  createdAt: DateTime!
  userId: ID!
}

type AuthorizeGithubOutput {
  state: String!
  url: String!
}

type RestrictedUserSelf {
  id: ID!
  name: String!
  email: String!
  profilePicture: String
  description: String
  codeforcesUsername: String
  leetcodeUsername: String
  githubToken: String
}

type RestrictedUserOther {
  id: ID!
  name: String!
  email: String!
  profilePicture: String
  description: String
  codeforcesUsername: String
  leetcodeUsername: String
}

input AddUsernameInput {
  username: String!
  platform: Website!
}

enum Website {
  CODEFORCES
  LEETCODE
}

input FakeInput {
  _: Boolean
}

input SearchInput {
  query: String!
  page: Int
}

enum ToggleAction {
  ADD
  REMOVE
}

input ToggleFollowInput {
  userId: ID!
  action: ToggleAction!
}

input PaginatedUserInput {
  userId: String!
  page: Int
}

input DescriptionInput {
  description: String!
}

input UserIdInput {
  userId: String!
}

type Mutation {
  # Authorize user with Github
  authorizeGithub(input: FakeInput): AuthorizeGithubOutput!
  addUsername(input: AddUsernameInput!): String!
  toggleFollow(input: ToggleFollowInput!): String!
  addDescription(input: DescriptionInput!): String!
}

type Query {
  getUserById(input: UserIdInput!): RestrictedUserOther!
  getUser: RestrictedUserSelf!
  search(input: SearchInput!): [RestrictedUserOther!]!
  getFollowers(input: PaginatedUserInput!): [RestrictedUserOther!]!
  getFollowing(input: PaginatedUserInput!): [RestrictedUserOther!]!
}
