type Contribution {
  date: DateTime!
  githubContributions: Int
  codeforcesContributions: Int
  leetcodeContributions: Int
}

# contribution
type ContributionGraph {
  totalContributions: Int!
  totalGithubContributions: Int
  totalCodeforcesContributions: Int
  totalLeetcodeContributions: Int
  contributions: [Contribution!]!
}

type Language {
  name: String!
  color: String!
}

type Repository {
  name: String!
  description: String
  url: String!
  stargazerCount: Int!
  forkCount: Int!
  primaryLanguage: Language!
}

type CFRating {
  contestId: Int!
  contestName: String!
  handle: String!
  rank: Int!
  oldRating: Int!
  newRating: Int!
  date: DateTime!
}

type CFRatingGraph {
  ratings: [CFRating!]!
}

type CFProblemRating {
  difficulty: Int!
  problemsCount: Int!
}

type CFBarGraph {
  problemRatingGraph: [CFProblemRating!]!
}

type CFProblemTag {
  tagName: String!
  problemsCount: Int!
}

type CFDonutGraph {
  problemTagGraph: [CFProblemTag!]!
}

type CodeforcesGraphsOutput {
  ratingGraph: CFRatingGraph!
  barGraph: CFBarGraph!
  donutGraph: CFDonutGraph!
}

type GithubStreakGraph {
  currentSteakLength: Int!
  longestStreakLength: Int!
  longestStreakStartDate: DateTime!
  longestStreakEndDate: DateTime!
  currentStreakStartDate: DateTime!
  totalContributions: Int!
}

type GithubLanguage {
  name: String!
  color: String!
  size: Int!
}

type GithubStatistics {
  # General
  followers: Int!
  following: Int!
  # Repos
  repos: Int!
  forkedBy: Int!
  watchedBy: Int!
  # Contributions
  commits: Int!
  issues: Int!
  contributedTo: Int!
  pullRequests: Int!
  pullRequestReviews: Int!
}

type GithubGraphsOutput {
  streakGraph: GithubStreakGraph!
  languageGraph: [GithubLanguage!]!
  statsGraph: GithubStatistics!
}

type LcContest {
  rating: Float!
  ranking: Int
  attendedContestsCount: Int!
  totalParticipants: Int!
  topPercentage: Float!
}

type LcDifficulty {
  difficulty: String!
  count: Int!
}

type LcProfile {
  realname: String!
  about: String
  avatar: String
  skills: [String!]!
  country: String
  ranking: Int
  categoryDiscussCount: Int!
  solutionCount: Int!
  reputation: Int!
  postViewCount: Int!
}

type LcLanguageProblemCount {
  languageName: String!
  problemsSolved: Int!
}

type LcTagProblems {
  tagName: String!
  tagSlug: String!
  problemsSolved: Int!
}

type LcTagProblemCount {
  advanced: [LcTagProblems!]!
  intermediate: [LcTagProblems!]!
  fundamental: [LcTagProblems!]!
}

type LcProblemsSolvedBeatsStats {
  difficulty: String!
  percentage: Float
}

type LcSubmitStatsGlobal {
  difficulty: String!
  count: Int!
}

type LcUser {
  username: String!
  profile: LcProfile!
  languageProblemCount: [LcLanguageProblemCount!]!
  tagProblemCounts: LcTagProblemCount!
  problemsSolvedBeatsStats: [LcProblemsSolvedBeatsStats!]!
  submitStatsGlobal: [LcSubmitStatsGlobal!]!
}

type LcHistoryContest {
  title: String!
  startTime: DateTime!
}

type LcContestHistory {
  attended: Boolean!
  problemsSolved: Int!
  totalProblems: Int!
  rating: Float!
  ranking: Int!
  contest: LcHistoryContest!
}

type LeetcodeGraphsOutput {
  contest: LcContest
  contestHistory: [LcContestHistory!]
  problems: [LcDifficulty!]!
  user: LcUser!
}

input UserIdInput {
  userId: String!
}

type Query {
  contributionGraph(input: UserIdInput!): ContributionGraph!
  getPinnedRepos(input: UserIdInput!): [Repository!]!
  codeforcesGraphs(input: UserIdInput!): CodeforcesGraphsOutput
  githubGraphs(input: UserIdInput!): GithubGraphsOutput
  leetcodeGraphs(input: UserIdInput!): LeetcodeGraphsOutput
}
